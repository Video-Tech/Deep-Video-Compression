!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
Decoder	network.py	/^class Decoder(nn.Module):$/;"	c
Encoder	network.py	/^class Encoder(nn.Module):$/;"	c
ImageFolder	dataset.py	/^class ImageFolder(data.Dataset):$/;"	c
__author__	codec.py	/^__author__ = 'SherlockLiao'$/;"	v
__getitem__	dataset.py	/^    def __getitem__(self, index):$/;"	m	class:ImageFolder	file:
__init__	dataset.py	/^    def __init__(self, is_train, root, mv_dir):$/;"	m	class:ImageFolder
__init__	network.py	/^    def __init__(self):$/;"	m	class:Decoder
__init__	network.py	/^    def __init__(self):$/;"	m	class:Encoder
__len__	dataset.py	/^    def __len__(self):$/;"	m	class:ImageFolder	file:
_load_image_list	dataset.py	/^    def _load_image_list(self):$/;"	m	class:ImageFolder
args	codec.py	/^args = parser.parse_args()$/;"	v
crop_cv2	dataset.py	/^def crop_cv2(img, patch):$/;"	f
decoder	codec.py	/^decoder = Decoder().cuda()$/;"	v
default_loader	dataset.py	/^def default_loader(path):$/;"	f
encoder	codec.py	/^encoder = Encoder().cuda()$/;"	v
flip_cv2	dataset.py	/^def flip_cv2(img, patch):$/;"	f
forward	network.py	/^    def forward(self, x):$/;"	m	class:Decoder
forward	network.py	/^    def forward(self, x):$/;"	m	class:Encoder
get_loader	dataset.py	/^def get_loader(is_train, root, mv_dir):$/;"	f
help	options.py	/^                    help='Batch size for testing.')$/;"	v
help	options.py	/^                    help='Batch size.')$/;"	v
help	options.py	/^                    help='Bottleneck code size.')$/;"	v
help	options.py	/^                    help='Checkpoint name to load. (Do nothing if not specified.)')$/;"	v
help	options.py	/^                    help='Checkpoint name to save.')$/;"	v
help	options.py	/^                    help='Evaluation period.')$/;"	v
help	options.py	/^                    help='If true, save output images during eval.')$/;"	v
help	options.py	/^                    help='If true, write compressed codes during eval.')$/;"	v
help	options.py	/^                    help='Iteraction of checkpoint to load.')$/;"	v
help	options.py	/^                    help='Max training iterations.')$/;"	v
help	options.py	/^                    help='Model checkpoint period.')$/;"	v
help	options.py	/^                    help='Output directory')$/;"	v
help	options.py	/^                    help='Path to model folder.')$/;"	v
img_transform	codec.py	/^img_transform = transforms.Compose([$/;"	v
is_train	codec.py	/^  is_train=False,$/;"	v
is_train	codec.py	/^  is_train=True,$/;"	v
learning_rate	codec.py	/^learning_rate = 1e-3$/;"	v
load_model	codec.py	/^def load_model(encoder, decoder, epoch, itr):$/;"	f
np_to_torch	dataset.py	/^def np_to_torch(img):$/;"	f
num_epochs	codec.py	/^num_epochs = 2$/;"	v
parser	options.py	/^parser = argparse.ArgumentParser()$/;"	v
save_model	codec.py	/^def save_model(encoder, decoder, epoch, itr):$/;"	f
test_codec	codec.py	/^def test_codec(encoder, decoder):$/;"	f
test_dir	codec.py	/^test_dir="..\/..\/data\/eval1"$/;"	v
test_loader	codec.py	/^test_loader = get_loader($/;"	v
test_mv_dir	codec.py	/^test_mv_dir="..\/..\/data\/eval1_mv"$/;"	v
to_img	codec.py	/^def to_img(x):$/;"	f
train_codec	codec.py	/^def train_codec(encoder, decoder):$/;"	f
train_dir	codec.py	/^train_dir="..\/..\/data\/train"$/;"	v
train_loader	codec.py	/^train_loader = get_loader($/;"	v
train_mv_dir	codec.py	/^train_mv_dir="..\/..\/data\/train_mv"$/;"	v
